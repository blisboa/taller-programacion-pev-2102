<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAEQAAAFMBAAHTwkACk8MAABRBwAAUwsACVAJAABYDAAAWREAE1ITAB5aHgAAcAUAAH8FAABz
        DwAKdQ8AAnoJAABgFgAAZhYAAG8aAANrHgASYhIAEmsWAB5gHgAAeBIAAHQZAAB7HgAeYiAAFW4lABVv
        KwAebCoACXAkAAB6JgAAeSsAB3grAAB5LAAReS4AEX0wACRgJAAlbScAJm8pACJ8JAAmdioAMm8zADF0
        MwAwejIAOXY7ADd5OwBIe0gAU3xTAACABQAAiQEAAI0AAACLBQAFigcAAI4HAACDDwAAjAkAAIoPAAmM
        DAAAkQAABpMFAAOUBQAHlQYACZUHAAeWCQAJkwkACZUJAAqWDAAMlg0ADZgPABGYDwAAgBIAAIURAACH
        FQAAixEABYsVAA2NEQAAgBoAAIIcABiDGgAciB0AD5cSAA+YEQARlxIAEZgSABOZFQAVmhYAGJcZABaa
        GAAWnRgAGJoZABmcGgAZmh0AGp0cABydHQAJiSEAEYMvABGGLAAZkyUAHZ8gABWEOwAVhDwAJ4AqACmE
        LQAsji8AIJ4hACWaJwAmnCYAKp4qACSCNwAkgTwAJYk6ACSNOgAqmzgAMJ8zADeSOQAeoSEAIKAhACGh
        JAAkoiUAJqMpACmjKgAppCoALKAsACqlLAAspi8ALacwAC+oMQAzojMAMKcyADKhNgA1ojUAMKkyADKq
        NgAzrTcANqI5ADmkPQA1qzgAM6w4ADatOgA4qzoAOK07ADmpPQA6rj4AOrA+AB6HQgAkh0MAJIhDADOH
        QQAtkEAAPqpCAD6xQQBLhE0AQ5hFAEefSgBIiVIASIpVAFWHVQBSilMAU5ZWAFOQXwBbkl4AUJ9bAECr
        QQBKr0sAQLNDAEGyRQBDtEcARbVJAEyxTgBIt0wASrlOAE+zUQBNuVEATb1RAE+7VABQtFIAUrVUAFG8
        VQBUvloASJ5jAFOQYQBcmWAAU5xqAFWfaQBklmYAZpdoAGqabQBbq2AAVrNiAFWncABls2oAYblrAGu2
        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
        AB/8AAA//gAAf/+AAf//8A//
</value>
  </data>
</root>